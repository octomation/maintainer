// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package labels_test is a generated GoMock package.
package labels_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	entity "go.octolab.org/toolset/maintainer/internal/entity"
)

// MockProvider is a mock of Provider interface
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// RepositoryWithLabels mocks base method
func (m *MockProvider) RepositoryWithLabels(arg0 context.Context, arg1 ...entity.RepositoryURN) ([]entity.Repository, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RepositoryWithLabels", varargs...)
	ret0, _ := ret[0].([]entity.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepositoryWithLabels indicates an expected call of RepositoryWithLabels
func (mr *MockProviderMockRecorder) RepositoryWithLabels(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepositoryWithLabels", reflect.TypeOf((*MockProvider)(nil).RepositoryWithLabels), varargs...)
}
