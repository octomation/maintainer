name: Continuous integration

on:
  workflow_dispatch:

  pull_request:
    branches: [ '*' ]
    paths:
      - '.github/workflows/ci.yml'
      - '.golangci.yml'
      - '**.go'
      - 'go.{mod,sum}'
      - '!tools/*'

  push:
    branches: [ '*' ]
    paths:
      - '.github/workflows/ci.yml'
      - '.golangci.yml'
      - '**.go'
      - 'go.{mod,sum}'
      - '!tools/*'
    tags: [ '!*' ]

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4.1.4
        with: { fetch-depth: 0 }
      - name: Set up Go environment
        uses: actions/setup-go@v5.0.0
        with: { go-version: 1.21.x, cache-dependency-path: tools/go.sum }

      - name: Prepare and run linter
        run: make tools lint
      - name: Check git state
        run: make generate git-check

  test:
    name: Testing
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        go:
          - 1.x
          - 1.21.x
          - 1.22.x

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4.1.4
        with: { fetch-depth: 0 }
      - name: Set up Go environment
        uses: actions/setup-go@v5.0.0
        with: { go-version: '${{ matrix.go }}' }

      - name: Prepare and run tests
        run: make env deps-fetch test-with-coverage
      - name: Store code coverage report
        uses: actions/upload-artifact@v4.3.1
        if: matrix.go == '1.21.x'
        with: { name: code-coverage-report, path: c.out }

      - run: make install
      - run: '[ $(ls bin/linux/*/* | wc -l) = 1 ]'

  report:
    name: Reporting
    needs: [ test ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4.1.4
        with: { fetch-depth: 0 }

      - name: Fetch code coverage report
        uses: actions/download-artifact@v4.1.4
        with: { name: code-coverage-report }
      - name: Send code coverage report to Codecov (codecov.io)
        uses: codecov/codecov-action@v3.1.4
        with: { files: c.out }

  notify:
    name: Notifying
    needs: [ lint, test ]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && (failure() || success())

    steps:
      - name: Send Slack notification
        uses: rtCamp/action-slack-notify@v2.3.0
        env:
          SLACK_COLOR: ${{ contains(needs.*.result, 'failure') && 'failure' || 'success' }}
          SLACK_ICON: https://github.com/github.png?size=64
          SLACK_TITLE: '⚙️ ${{ github.repository }}: ${{ github.workflow }}'
          SLACK_USERNAME: GitHub Actions
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
